function mystruct = get_struct(type, nstruct)

  if (nargin == 1)
    nstruct = 0;
  end

  switch type
    case 'smoothness_parameters'
      mystruct = struct('nhood', 0, ...
                        'init', [], ...
                        'final', [], ...
                        'alpha', 0, ...
                        'beta', 0, ...
                        'gamma', 0);

    case 'scoring_parameters'
      mystruct = struct('filt', [], ...
                        'path', [], ...
                        'alpha', 0, ...
                        'beta', 0, ...
                        'gamma', 0, ...
                        'delta', 0, ...
                        'epsilon', 0, ...
                        'zeta', 0, ...
                        'eta', 0);

    case 'conversion'
      mystruct = struct('bkg', 0.0424, ...
                        'factor', -0.0440, ...
                        'range', -0.0176, ...
                        'shift', 5.1836);

    case 'segmentation' 

      params = get_struct('smoothness_parameters', 1);
      weights = get_struct('scoring_parameters', 1);

      mystruct = struct('safety', 1.2, ...
                        'eggshell_params', params, ...
                        'eggshell_weights', weights, ...
                        'cortex_params', params, ...
                        'cortex_weights', weights, ...
                        'noise', [], ...
                        'drift', [], ...
                        'scoring_func', {{@weight_egg; @weight_cortex}});

      mystruct = struct('dic', mystruct, ...
                        'markers', mystruct, ...
                        'correction', get_struct('conversion', 1));

      %%### DIC PARAMETERS ###%%
      
      % Good values for the eggshell
      mystruct.dic.eggshell_params.nhood   = 5;
      mystruct.dic.eggshell_params.alpha   = 0.65; % Prop. of smoothness VS data
      mystruct.dic.eggshell_params.beta    = 0.55; % Prop. of path VS intensity
      mystruct.dic.eggshell_params.gamma   = 0.5;  % Prop. of dx VS d2x

      mystruct.dic.eggshell_weights.alpha  = 0.25;
      mystruct.dic.eggshell_weights.beta   = 0.02;

      mystruct.dic.eggshell_weights.eta    = 0.5; % Position of the eggshell between outside & inside

      % Good values for the cortex
      mystruct.dic.cortex_params.nhood    = 5;
      mystruct.dic.cortex_params.alpha    = 0.15;
      mystruct.dic.cortex_params.beta     = 0.55;
      mystruct.dic.cortex_params.gamma    = 0.25;

      mystruct.dic.cortex_weights.alpha   = 0.15;
      mystruct.dic.cortex_weights.beta    = 0.65;
      mystruct.dic.cortex_weights.gamma   = 0.5;
      mystruct.dic.cortex_weights.delta   = 0.45;
      mystruct.dic.cortex_weights.epsilon = 0.75;

      %%### MARKERS PARAMETERS ###%%

      mystruct.markers.eggshell_params.nhood   = 5;
      mystruct.markers.eggshell_params.alpha   = 0.35;
      mystruct.markers.eggshell_params.beta    = 0.35;
      mystruct.markers.eggshell_params.gamma   = 0.75;

      mystruct.markers.eggshell_weights.filt   = ...
          ['filt = ones(1,2*round(max(imgsize) / 100) + 1);' ...
          'filt(1,1:floor(length(filt) / 2)) = -0.5;' ...
          'filt / sum(abs(filt));'];
      mystruct.markers.eggshell_weights.alpha  = 0.25;

      mystruct.markers.cortex_params.nhood  = 9;
      mystruct.markers.cortex_params.alpha  = 0.225;
      mystruct.markers.cortex_params.beta   = 0.35;
      mystruct.markers.cortex_params.gamma  = 0.95;

      mystruct.markers.cortex_weights.alpha = 0.475;
      mystruct.markers.cortex_weights.beta  = 0.045;

      mystruct.markers.scoring_func = {@intens_filt;...
                                       @intens_sum};

      mystruct.markers.shrink = 'strel(''disk'', round(max(imgsize) / 75), 0);';
      mystruct.markers.noise  = struct('gaussian', 'max(imgsize) / 1000;', ...
                                         'median', [5 5]);

    case 'mymovie'
      mystruct = struct('experiment', '', ...
                        'dic', [], ...
                        'cortex', [], ...
                        'eggshell', [], ...
                        'data', [], ...
                        'markers', []);
    case {'eggshell', 'cortex'}
      mystruct = struct('thickness', 0, ...
                        'carth', [], ...
                        'temperatures', [], ...
                        'estim', []);
    case 'temperatures'
      mystruct = struct('aim_transitions', 1/6, ...
                        'aim_emissions', 1/50, ...
                        'thresh', 1e-3, ...
                        'step_thresh', 1e-5);
    case 'trackings'
      mystruct = struct('dic', get_struct('tracking', 1), ...
                        'markers', get_struct('tracking', 1));
    case 'tracking'
      mystruct = struct('mean',[], ...
                        'reference', get_struct('reference'), ...
                        'elliptic', [], ...
                        'name','', ...
                        'errors',[], ...
                        'expr','', ...
                        'child',[], ...
                        'files',[]);
    case 'file'
      mystruct = struct('fname','', ...
                        'splines',[], ...
                        'shapes',[], ...
                        'groups',{{}});
    case 'channel'
      mystruct = struct('file','', ...
                        'color',zeros(1,3), ...
                        'type','data', ...
                        'detrend',false, ...
                        'hot_pixels',false, ...
                        'fname','', ...
                        'min', Inf, ...
                        'max', -Inf, ...
                        'metadata', '');
    case 'warper'
      mystruct = struct('original',get_struct('reference',1),...
                        'reference', get_struct('reference',1), ...
                        'warp', []);
    case 'spline'
      mystruct = struct('form', '', ...
                        'breaks', [], ...
                        'coefs', [], ...
                        'pieces', 0, ...
                        'order', 0, ...
                        'dim', 0);
    case 'RECOS'
      mystruct = struct('auto_save', true, ...
                        'export_movie', false, ...
                        'crop_export', false, ...
                        'crop_size', 2.2, ...
                        'debug', false, ...
                        'compression', 'LZW', ...
                        'max_export', 1, ...
                        'parse_export', 'normal', ...
                        'segmentation_parameters', get_struct('segmentation', 1), ...
                        'segmentation_type', 'dic', ...
                        'segmentation_nparams', 0, ...
                        'compute_probabilities', false, ...
                        'parse_frames', 'normal', ...
                        'recompute', false, ...
                        'max_frames', 1, ...
                        'normalize', true, ...
                        'measure_performances', false, ...
                        'force_circularity', true, ...
                        'dp_method', 'double', ...
                        'trackings', '', ...
                        'nbins', 36, ...
                        'uuid', 0 , ...
                        'temperatures', get_struct('temperatures',1), ...
                        'follow_periphery', true, ...
                        'analysed_fields', {{'carth'}}, ...
                        'application', {{''}}, ...
                        'warp_type', 'radial', ...
                        'verbosity', 1, ...
                        'segment', true, ...
                        'config_file', '', ...
                        'ml_type', 'cortex', ...
                        'do_ml', 'none');
    case 'reference'
      mystruct = struct('center', [0;0], ...
                        'axes_length', [25;15], ...
                        'orientation', 0);
    case 'ml_params'
      mystruct = struct('score', Inf, ...
                        'ml_type', '', ...
                        'params', []);
    case 'ruffles'
      mystruct = struct('carth', [], ...
                        'cluster', [], ...
                        'bounds', [], ...
                        'properties', []);

    otherwise
      mystruct = struct();
  end

  mystruct = repmat(mystruct,nstruct);

  return;
end
